'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.typeSwitch = exports.switchOn = exports.empty = exports.notEmpty = exports.checkAsync = exports.trim = exports.toUpperCase = exports.toLowerCase = exports.substr = exports.startsWith = exports.split = exports.search = exports.replace = exports.repeat = exports.prepend = exports.matches = exports.hash = exports.endsWith = exports.charCodeAt = exports.charAt = exports.append = exports.sortBy = exports.notEquals = exports.equals = exports.lte = exports.lt = exports.gte = exports.gt = exports.mod = exports.divide = exports.divideBy = exports.mult = exports.sub = exports.subFrom = exports.add = exports.get = exports.identity = exports.debug = exports.__ = exports._ = exports.composeR = exports.compose = exports.toLocaleString = exports.toString = exports.remove = exports.props = exports.prop = exports.merge = exports.clone = exports.values = exports.unshift = exports.unique = exports.union = exports.sort = exports.some = exports.splice = exports.slice = exports.shift = exports.reverse = exports.reduceRight = exports.reduce = exports.range = exports.push = exports.pop = exports.partitionOn = exports.partition = exports.map = exports.lastIndexOf = exports.last = exports.keys = exports.juxt = exports.join = exports.joinWith = exports.isArray = exports.indexOf = exports.includes = exports.from = exports.forEach = exports.flatten = exports.first = exports.findIndex = exports.find = exports.filter = exports.every = exports.entries = exports.createIndex = exports.concat = exports.at = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeOf = require('type-of');

var _typeOf2 = _interopRequireDefault(_typeOf);

var _kindOf = require('kind-of');

var _kindOf2 = _interopRequireDefault(_kindOf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//Array functions
var at = exports.at = function at(index) {
    return function (arr) {
        return arr[index];
    };
};
var concat = exports.concat = function concat(item) {
    return function (arr) {
        return [].concat(arr).concat(item);
    };
};
var createIndex = exports.createIndex = function createIndex(getId) {
    var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
    return function (arr) {
        var index = arr.reduce(function (combined, cur) {
            return _extends({}, combined, _defineProperty({}, getId(cur), transform(cur)));
        }, {});
        return function (id) {
            return index[id];
        };
    };
};
var entries = exports.entries = function entries(arr) {
    return arr.entries();
};
var every = exports.every = function every(f) {
    return function (arr) {
        return arr.every(f);
    };
};
var filter = exports.filter = function filter(f) {
    return function (obj) {
        return typeSwitch(obj, {
            array: function array() {
                return obj.filter(f);
            },
            object: function object() {
                return Object.keys(obj).reduce(function (combined, key) {
                    return f(obj[key], key) ? _extends({}, combined, _defineProperty({}, key, obj[key])) : combined;
                }, {});
            }
        });
    };
};
var find = exports.find = function find(f) {
    return function (arr) {
        return arr.find(f);
    };
};
var findIndex = exports.findIndex = function findIndex(f) {
    return function (arr) {
        return arr.findIndex(f);
    };
};
var first = exports.first = at(0);
var flatten = exports.flatten = function flatten(arr) {
    return arr.reduce(function (combined, cur) {
        return combined.concat(cur);
    }, []);
};
var forEach = exports.forEach = function forEach(f) {
    return function (arr) {
        arr.forEach(f);return arr;
    };
};
var from = exports.from = function from(arr) {
    return Array.from(arr);
};
var includes = exports.includes = function includes(item) {
    return function (arr) {
        return arr.includes(item);
    };
};
var indexOf = exports.indexOf = function indexOf(item) {
    return function (arr) {
        return arr.indexOf(item);
    };
};
var isArray = exports.isArray = function isArray(obj) {
    return Array.isArray(obj);
};
var joinWith = exports.joinWith = function joinWith(sep) {
    return function (arr) {
        return arr.join(sep);
    };
};
var join = exports.join = joinWith('');
var juxt = exports.juxt = function juxt() {
    var _arguments = arguments;
    return function (obj) {
        return map(function (f) {
            return typeof f == 'function' ? f(obj) : f;
        })([].concat(Array.prototype.slice.call(_arguments)));
    };
};
var keys = exports.keys = function keys(obj) {
    return typeSwitch(obj, {
        array: function array() {
            return obj.keys();
        },
        object: function object() {
            return Object.keys(obj);
        }
    });
};
var last = exports.last = function last(arr) {
    return at(arr.length - 1)(arr);
};
var lastIndexOf = exports.lastIndexOf = function lastIndexOf(item) {
    return function (arr) {
        return arr.lastIndexOf(item);
    };
};
var map = exports.map = function map(f) {
    return function (obj) {
        return typeSwitch(obj, {
            array: function array() {
                return obj.map(f);
            },
            object: function object() {
                return keys(obj).map(function (val, key) {
                    return _defineProperty({}, key, f(val, key));
                }).reduce(merge);
            }
        });
    };
};
var partition = exports.partition = function partition(partitionFunc) {
    return function (arr) {
        var index = arr.reduce(function (partitioned, cur) {
            var key = partitionFunc(cur);
            return _extends({}, partitioned, _defineProperty({}, key, partitioned[key] ? partitioned[key].concat(cur) : [cur]));
        }, {});
        return function (id) {
            return index[id] || [];
        };
    };
};
var partitionOn = exports.partitionOn = function partitionOn(propName) {
    return partition(prop(propName));
};
var pop = exports.pop = function pop(arr) {
    arr = from(arr);arr.pop();return arr;
};
var push = exports.push = function push(item) {
    return function (arr) {
        arr = from(arr);arr.push(item);return arr;
    };
};
var range = exports.range = function range(start, end) {
    return [].concat(_toConsumableArray(Array(Math.abs(end - start) + 1).keys())).map(function (i) {
        return start < end ? i + start : start - i;
    });
};
var reduce = exports.reduce = function reduce(f, initial) {
    return function (arr) {
        return arr.reduce(f, initial);
    };
};
var reduceRight = exports.reduceRight = function reduceRight(f, initial) {
    return function (arr) {
        return reverse(arr).reduce(f, initial);
    };
};
var reverse = exports.reverse = function reverse(arr) {
    return from(arr).reverse();
};
var shift = exports.shift = function shift(arr) {
    arr = from(arr);arr.shift();return arr;
};
var slice = exports.slice = function slice(start, end) {
    return function (arr) {
        return arr.slice(start, end);
    };
};
var splice = exports.splice = function splice(start, length, replace) {
    return function (arr) {
        var newArr = [].concat(_toConsumableArray(arr));
        if (typeof replace !== 'undefined') {
            newArr.splice(start, length, replace);
        } else {
            newArr.splice(start, length);
        }
        return newArr;
    };
};
var some = exports.some = function some(f) {
    return function (arr) {
        return arr.some(f);
    };
};
var sort = exports.sort = function sort(f) {
    return function (arr) {
        return from(arr).sort(f);
    };
};
var union = exports.union = function union(a, b) {
    return unique([].concat(a).concat(b));
};
var unique = exports.unique = function unique(arr) {
    return [].concat(_toConsumableArray(new Set(arr)));
};
var unshift = exports.unshift = function unshift(item) {
    return function (arr) {
        arr = from(arr);arr.unshift(item);return arr;
    };
};
var values = exports.values = function values(arr) {
    return arr.values();
};

//Object
var clone = exports.clone = function clone(obj) {
    return _extends({}, obj);
};
var merge = exports.merge = function merge(a, b) {
    return unique(concat(keys(a))(keys(b))).reduce(function (obj, key) {
        //If something broke, just return nothing
        if ((0, _kindOf2.default)(obj) === 'undefined') return undefined;

        //Ensure that both attributes have the same type
        var aType = (0, _kindOf2.default)(a[key]);
        var bType = (0, _kindOf2.default)(b[key]);

        var val = aType === 'undefined' ? b[key] : bType === 'undefined' ? a[key] : switchOn(aType, {
            object: function object() {
                return merge(a[key], b[key]);
            },
            array: function array() {
                return a[key].concat(b[key]);
            },
            default: function _default() {
                return bType !== 'undefined' ? b[key] : a[key];
            }
        });
        return _extends(_defineProperty({}, key, val), obj);
    }, {});
};
var prop = exports.prop = function prop(name) {
    return function (obj) {
        return obj[name];
    };
};
var props = exports.props = juxt;
var remove = exports.remove = function remove(names) {
    return function (obj) {
        obj = _extends({}, obj);
        [].concat(names).forEach(function (name) {
            delete obj[name];
        });
        return obj;
    };
};
var toString = exports.toString = function toString(obj) {
    return obj.toString();
};
var toLocaleString = exports.toLocaleString = function toLocaleString(obj) {
    return obj.toLocaleString();
};

//Function composition
var compose = exports.compose = function compose() {
    var _arguments2 = arguments;

    return function (obj) {
        return reverse([].concat(Array.prototype.slice.call(_arguments2))).reduce(function (data, f) {
            return typeof f === 'function' ? f(data) : data;
        }, obj);
    };
};
var composeR = exports.composeR = function composeR() {
    var _arguments3 = arguments;

    return function (obj) {
        return [].concat(Array.prototype.slice.call(_arguments3)).reduce(function (data, f) {
            return typeof f === 'function' ? f(data) : data;
        }, obj);
    };
};
var _ = exports._ = compose;
var __ = exports.__ = composeR;

//Helpers
var debug = exports.debug = function debug(stuff) {
    console.log(stuff);return stuff;
};
var identity = exports.identity = function identity(a) {
    return a;
};
var get = exports.get = function get(a) {
    return function () {
        return a;
    };
};

//Math
var add = exports.add = function add(a) {
    return function (b) {
        return a + b;
    };
};
var subFrom = exports.subFrom = function subFrom(a) {
    return function (b) {
        return a - b;
    };
};
var sub = exports.sub = function sub(a) {
    return function (b) {
        return b - a;
    };
};
var mult = exports.mult = function mult(a) {
    return function (b) {
        return a * b;
    };
};
var divideBy = exports.divideBy = function divideBy(a) {
    return function (b) {
        return b / a;
    };
};
var divide = exports.divide = function divide(a) {
    return function (b) {
        return a / b;
    };
};
var mod = exports.mod = function mod(a) {
    return function (b) {
        return b % a;
    };
};

//Comparison
var gt = exports.gt = function gt(a) {
    return function (b) {
        return b > a;
    };
};
var gte = exports.gte = function gte(a) {
    return function (b) {
        return b >= a;
    };
};
var lt = exports.lt = function lt(a) {
    return function (b) {
        return b < a;
    };
};
var lte = exports.lte = function lte(a) {
    return function (b) {
        return b <= a;
    };
};
var equals = exports.equals = function equals(a) {
    return function (b) {
        return a == b;
    };
};
var notEquals = exports.notEquals = function notEquals(a) {
    return function (b) {
        return a != b;
    };
};
var sortBy = exports.sortBy = function sortBy(field) {
    return function (a, b) {
        return typeof a[field] === 'string' ? a[field].localeCompare(b[field]) : a[field] - b[field];
    };
};

//String
var append = exports.append = function append(suffix) {
    return function (str) {
        return str + suffix;
    };
};
var charAt = exports.charAt = function charAt(index) {
    return function (str) {
        return str.charAt(index);
    };
};
var charCodeAt = exports.charCodeAt = function charCodeAt(index) {
    return function (str) {
        return str.charCodeAt(index);
    };
};
var endsWith = exports.endsWith = function endsWith(suffix) {
    return str.endsWith(suffix);
};
var hash = exports.hash = function hash(data) {
    var str = JSON.stringify(data);
    //const h = crypto.createHash('sha256');
    //h.update(str);
    //return h.digest('hex');
    return str;
};
var matches = exports.matches = function matches(regex) {
    return function (str) {
        return str.match(regex);
    };
};
var prepend = exports.prepend = function prepend(prefix) {
    return function (str) {
        return prefix + str;
    };
};
var repeat = exports.repeat = function repeat(count) {
    return function (str) {
        return str.repeat(count);
    };
};
var replace = exports.replace = function replace(search) {
    return function (replacement) {
        return function (str) {
            return str.replace(search, replacement);
        };
    };
};
var search = exports.search = function search(term) {
    return function (str) {
        return str.search(term);
    };
};
var split = exports.split = function split(sep) {
    return function (str) {
        return str.split(sep);
    };
};
var startsWith = exports.startsWith = function startsWith(prefix) {
    return function (str) {
        return str.startsWith(term);
    };
};
var substr = exports.substr = function substr(start, len) {
    return function (str) {
        return str.substr(start, len);
    };
};
var toLowerCase = exports.toLowerCase = function toLowerCase(str) {
    return str.toLowerCase();
};
var toUpperCase = exports.toUpperCase = function toUpperCase(str) {
    return str.toUpperCase();
};
var trim = exports.trim = function trim(str) {
    return str.trim();
};

//Checks
var checkAsync = exports.checkAsync = function checkAsync(f) {
    return new Promise(function (resolve, reject) {});
};
var notEmpty = exports.notEmpty = function notEmpty(a) {
    return new Promise(function (resolve, reject) {
        a ? resolve(a) : reject(a);
    });
};

var empty = exports.empty = function empty(a) {
    return new Promise(function (resolve, reject) {
        a ? reject(a) : resolve(a);
    });
};

//Control flow
var switchOn = exports.switchOn = function switchOn(obj, actions) {
    return (actions[obj] || actions.default || function () {
        return undefined;
    })();
};
var typeSwitch = exports.typeSwitch = function typeSwitch(obj, actions) {
    return switchOn((0, _typeOf2.default)(obj), actions);
};